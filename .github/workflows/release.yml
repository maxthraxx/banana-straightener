name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'src/banana_straightener/__init__.py'

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
      version-exists: ${{ steps.version-check.outputs.exists }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to compare
    
    - name: Check if version changed
      id: version-check
      run: |
        # Get current version from pyproject.toml
        NEW_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Get previous version
        git checkout HEAD~1 -- pyproject.toml 2>/dev/null || echo "No previous version"
        OLD_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2 2>/dev/null || echo "")
        git checkout HEAD -- pyproject.toml
        
        echo "Previous version: $OLD_VERSION"
        echo "New version: $NEW_VERSION"
        
        # Check if version actually changed
        if [ "$OLD_VERSION" != "$NEW_VERSION" ] && [ ! -z "$NEW_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if release already exists for this version
        if gh release view "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v$NEW_VERSION already exists, skipping..."
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ github.token }}

  release-and-publish:
    runs-on: ubuntu-latest
    needs: check-version-change
    if: needs.check-version-change.outputs.version-changed == 'true' && needs.check-version-change.outputs.version-exists == 'false'
    permissions:
      contents: write
      id-token: write  # Required for PyPI trusted publishing
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov build twine
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/banana_straightener --cov-report=xml
    
    - name: Extract changelog for version
      id: changelog
      run: |
        VERSION="${{ needs.check-version-change.outputs.new-version }}"
        
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Get content between [VERSION] and next version or end of file
          awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > current_changelog.md
          
          # If changelog section is empty or doesn't exist, create a simple one
          if [ ! -s current_changelog.md ]; then
            echo "### Changes" > current_changelog.md
            echo "- Version bump to $VERSION" >> current_changelog.md
            echo "- See commit history for detailed changes" >> current_changelog.md
          fi
        else
          # No changelog file, create simple release notes
          echo "### Changes" > current_changelog.md
          echo "- Version bump to $VERSION" >> current_changelog.md
          echo "- See commit history for detailed changes" >> current_changelog.md
        fi
        
        # Set multiline output
        echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
        cat current_changelog.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      run: |
        VERSION="${{ needs.check-version-change.outputs.new-version }}"
        
        # Check if release already exists
        if gh release view "v$VERSION" >/dev/null 2>&1; then
          echo "Release v$VERSION already exists, updating it..."
          gh release edit "v$VERSION" \
            --notes "${{ steps.changelog.outputs.CHANGELOG }}" \
            --latest
          echo "âœ… Updated existing release v$VERSION"
        else
          echo "Creating new release v$VERSION..."
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "${{ steps.changelog.outputs.CHANGELOG }}" \
            --latest
          echo "âœ… Created release v$VERSION"
        fi
      env:
        GH_TOKEN: ${{ github.token }}
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
    
    - name: Success notification
      run: |
        VERSION="${{ needs.check-version-change.outputs.new-version }}"
        echo "ðŸŽ‰ Successfully released v$VERSION to GitHub and PyPI!"